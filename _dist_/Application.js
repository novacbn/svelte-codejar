/* src/Application.svelte generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import { hash } from "./stores/hash.js";
import Layout from "./routes/$layout.js";
import Index from "./routes/index.js";
import Demo from "./routes/demo.js";

function create_else_block(ctx) {
	let index;
	let current;
	index = new Index({});

	return {
		c() {
			create_component(index.$$.fragment);
		},
		m(target, anchor) {
			mount_component(index, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(index.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(index.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(index, detaching);
		}
	};
}

// (13:4) {#if $store === '#/demo'}
function create_if_block(ctx) {
	let demo;
	let current;
	demo = new Demo({});

	return {
		c() {
			create_component(demo.$$.fragment);
		},
		m(target, anchor) {
			mount_component(demo, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(demo.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(demo.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(demo, detaching);
		}
	};
}

// (12:0) <Layout>
function create_default_slot(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$store*/ ctx[0] === "#/demo") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment(ctx) {
	let layout;
	let current;

	layout = new Layout({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(layout.$$.fragment);
		},
		m(target, anchor) {
			mount_component(layout, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const layout_changes = {};

			if (dirty & /*$$scope, $store*/ 5) {
				layout_changes.$$scope = { dirty, ctx };
			}

			layout.$set(layout_changes);
		},
		i(local) {
			if (current) return;
			transition_in(layout.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(layout.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(layout, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $store;
	const store = hash();
	component_subscribe($$self, store, value => $$invalidate(0, $store = value));
	return [$store, store];
}

class Application extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Application;