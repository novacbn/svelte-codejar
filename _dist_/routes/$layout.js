import './$layout.css.proxy.js';
/* src/routes/$layout.svelte generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	append,
	attr,
	component_subscribe,
	create_slot,
	destroy_block,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out,
	update_keyed_each,
	update_slot
} from "../../web_modules/svelte/internal.js";

import { hash } from "../stores/hash.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (45:12) {#each LINKS as link (link.href)}
function create_each_block(key_1, ctx) {
	let a;
	let t_value = /*link*/ ctx[4].text + "";
	let t;
	let a_href_value;
	let a_target_value;
	let a_rel_value;

	return {
		key: key_1,
		first: null,
		c() {
			a = element("a");
			t = text(t_value);
			attr(a, "href", a_href_value = /*link*/ ctx[4].href);
			attr(a, "target", a_target_value = /*link*/ ctx[4].target);
			attr(a, "rel", a_rel_value = /*link*/ ctx[4].rel);
			toggle_class(a, "active", is_active(/*link*/ ctx[4].href, /*$store*/ ctx[0]));
			this.first = a;
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*is_active, LINKS, $store*/ 1) {
				toggle_class(a, "active", is_active(/*link*/ ctx[4].href, /*$store*/ ctx[0]));
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let center;
	let h1;
	let t1;
	let nav;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t2;
	let current;
	let each_value = LINKS;
	const get_key = ctx => /*link*/ ctx[4].href;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	return {
		c() {
			main = element("main");
			center = element("center");
			h1 = element("h1");
			h1.innerHTML = `<code>svelte-codejar</code>`;
			t1 = space();
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			if (default_slot) default_slot.c();
			attr(nav, "class", "tabs svelte-xylpso");
			attr(main, "class", "container");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, center);
			append(center, h1);
			append(center, t1);
			append(center, nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(nav, null);
			}

			append(main, t2);

			if (default_slot) {
				default_slot.m(main, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*LINKS, is_active, $store*/ 1) {
				const each_value = LINKS;
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, nav, destroy_block, create_each_block, null, get_each_context);
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (default_slot) default_slot.d(detaching);
		}
	};
}

const LINKS = [
	{ href: "#/", text: "README" },
	{ href: "#/demo", text: "Demo" },
	{
		href: "https://github.com/novacbn/svelte-codejar",
		text: "GitHub",
		target: "_blank",
		rel: "noopener"
	},
	{
		href: "https://medv.io/codejar/",
		text: "CodeJar",
		target: "_blank",
		rel: "noopener"
	}
];

function is_active(href, hash = "") {
	if (!href.startsWith("#")) return false;
	return href === hash || hash.slice(2) === href.slice(2);
}

function instance($$self, $$props, $$invalidate) {
	let $store;
	let { $$slots: slots = {}, $$scope } = $$props;
	const store = hash();
	component_subscribe($$self, store, value => $$invalidate(0, $store = value));

	$$self.$$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	return [$store, store, $$scope, slots];
}

class $layout extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default $layout;