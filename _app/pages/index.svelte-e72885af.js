import{S as n,i as s,s as a,j as t,m as e,o,v as p,r as c,w as l,l as i,f as u,G as r,d,H as k}from"../chunks/vendor-1d56b9c4.js";/* empty css                               */import{M as h}from"../chunks/_MainLayout-efea3ac1.js";import"../chunks/paths-45dac81d.js";function g(n){let s,a;return{c(){a=i(),this.h()},l(n){a=i(),this.h()},h(){s=new k(a)},m(n,t){s.m('<h1><code>svelte-codejar</code></h1>\n<h2>Description</h2>\n<p>Svelte Binding for the embeddable code editor CodeJar</p>\n<h2>Demo</h2>\n<p>See a demo at <a href="https://novacbn.github.io/svelte-codejar/demo">novacbn.github.io/svelte-codejar/demo</a></p>\n<h2>Sample</h2>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span>CodeJar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-codejar"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log("Hello World!");</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!--\n    `CodeJar` options with their defaults\n    See more information at: https://github.com/antonmedv/codejar#getting-started\n--\x3e</span>\n\n<span class="token comment">&lt;!--\n    **NOTE**: Syntax highlighting is optional and must be provided by you. See the\n    sample below on how to use it\n\n    **NOTE2**: When setting `CodeJar.tab`, if you\'re using escape characters such\n    as `\\t`, you need encapsulate it as a raw string (see below). Otherwise the Svelte\n    compiler will escape the value when it parses your code\n--\x3e</span>\n\n&lt;CodeJar addClosing={true} indentOn={/{$/} spellcheck={false} tab={"\\t"} bind:value />\n</code></pre>\n<h2>Syntax Highlighting</h2>\n<h3>highlight.js</h3>\n<blockquote>\n<p><strong>NOTE</strong>: The sample below uses <a href="https://highlightjs.org/">highlight.js</a>, see the link for more information.</p>\n</blockquote>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token comment">// We need to configure highlight.js for Javascript, and then alias the</span>\n    <span class="token comment">// exports to match the function signatures that `CodeJar` Component expects</span>\n    <span class="token keyword">import</span> hljs <span class="token keyword">from</span> <span class="token string">"highlight.js/lib/core"</span><span class="token punctuation">;</span>\n    <span class="token keyword">import</span> javascript <span class="token keyword">from</span> <span class="token string">"highlight.js/lib/languages/javascript"</span><span class="token punctuation">;</span>\n\n    hljs<span class="token punctuation">.</span><span class="token function">registerLanguage</span><span class="token punctuation">(</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> javascript<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// `highlightElement` applies whenever the `CodeJar` Editor is active on the Browser,</span>\n    <span class="token comment">// and needs to apply syntax highlighting to the container `HTMLElement`</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">highlightElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> syntax</span><span class="token punctuation">)</span> <span class="token operator">=></span> hljs<span class="token punctuation">.</span><span class="token function">highlightElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// `highlightCode` applies during server-side rendering or Browsers with scripting,</span>\n    <span class="token comment">// disabled where the `CodeJar` Editor would not be active</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">highlightCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> syntax</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        hljs<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n            language<span class="token operator">:</span> syntax<span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span>CodeJar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-codejar"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log("Hello World!");</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!--\n    Now we pass `CodeJar` our syntax highlighting functions along with the\n    language syntax used for highlighting\n--\x3e</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeJar</span> <span class="token attr-name">syntax</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">{highlightCode}</span> <span class="token attr-name">{highlightElement}</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>\n</code></pre>\n<h3>PrismJS</h3>\n<blockquote>\n<p><strong>NOTE</strong>: The code is the same as above, but with <a href="https://prismjs.com/">PrismJS</a> calls instead of highlight.js</p>\n</blockquote>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> Prism <span class="token keyword">from</span> <span class="token string">"prismjs"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">highlightElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> syntax</span><span class="token punctuation">)</span> <span class="token operator">=></span> Prism<span class="token punctuation">.</span><span class="token function">highlightElement</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">highlightCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> syntax</span><span class="token punctuation">)</span> <span class="token operator">=></span> Prism<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> Prism<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>syntax<span class="token punctuation">]</span><span class="token punctuation">,</span> syntax<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span>CodeJar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-codejar"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">console.log("Hello World!");</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeJar</span> <span class="token attr-name">syntax</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span> <span class="token attr-name">{highlightCode}</span> <span class="token attr-name">{highlightElement}</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>\n</code></pre>\n<h2>FAQ</h2>\n<h3>SvelteKit — <code>ReferenceError: window is not defined</code></h3>\n<p>When using the library with <a href="https://kit.svelte.dev">SvelteKit</a> with SSR (serverside rendering) enabled you might get this error:</p>\n<pre><code>[vite] Error when evaluating SSR module /node_modules/codejar/codejar.js?v=4f67a3d5:\nReferenceError: window is not defined\n</code></pre>\n<p>Nothing much can do about that, CodeJar <a href="https://github.com/antonmedv/codejar/blob/b037e29b6565269a2f797e62f51966d77cdf3978/codejar.ts#L1">makes a <code>window</code> assignment</a> in its module scope. However you can do a workaround via <a href="https://svelte.dev/docs#onMount"><code>onMount</code></a> or other similar workflows:</p>\n<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">import</span> <span class="token punctuation">{</span>onMount<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"svelte-codejar"</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">export</span> <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// **NOTE:** Since `onMount` is only called on the client, we can just</span>\n    <span class="token comment">// make our import there. And assign to our Component\'s scope</span>\n    <span class="token keyword">let</span> CodeJar<span class="token punctuation">;</span>\n    <span class="token function">onMount</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token punctuation">(</span><span class="token punctuation">{</span>CodeJar<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"svelte-codejar"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n\n{#if CodeJar}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CodeJar</span> <span class="token attr-name"><span class="token namespace">bind:</span>value</span> <span class="token punctuation">/></span></span>\n{:else}\n<span class="token comment">&lt;!--\n    **NOTE:** Normally the `CodeJar` Svelte handles fall through for us, and\n    renders / syntax highlights without an editor during SSR / non-JS enabled clients\n--\x3e</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">></span></span>{value}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span>\n{/if}\n</code></pre>\n<p>Only downside being you have to manually syntax highlight your code in the <code>{:else}</code> block for SSR / non-JS enabled clients.</p>\n<h2>Developer</h2>\n<h3>Installation</h3>\n<p>Open your terminal and install via <code>npm</code>:</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> github:novacbn/svelte-codejar<span class="token comment">#0.0.3</span>\n</code></pre>\n<p>Install current in-development code:</p>\n<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> github:novacbn/svelte-codejar\n</code></pre>\n<h3>Properties</h3>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Typing</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>addClosing</td>\n<td><code>boolean</code></td>\n<td><code>true</code></td>\n<td>Sets whether the Editor automatically adds closing delimiters, like brackets, quotes, etc...</td>\n</tr>\n<tr>\n<td>indentOn</td>\n<td><code>RegExp</code></td>\n<td><code>/{$/</code></td>\n<td>Represents what expression is used to detect when the Editor needs to auto indent with the configured tab characters</td>\n</tr>\n<tr>\n<td>spellcheck</td>\n<td><code>boolean</code></td>\n<td><code>false</code></td>\n<td>Sets whether to enable the Browser\'s spellcheck or not</td>\n</tr>\n<tr>\n<td>tab</td>\n<td><code>string</code></td>\n<td><code>\\t</code></td>\n<td>Sets the characters inserted whenever the end-user pressed the tab key</td>\n</tr>\n<tr>\n<td>highlightCode</td>\n<td><code>(code: string, syntax: string) =&gt; string</code></td>\n<td><code>null</code></td>\n<td>Whenever <code>CodeJar</code> is used in SSR / disabled Javascript, this callback is called to render highlighted HTML markup</td>\n</tr>\n<tr>\n<td>highlightElement</td>\n<td><code>(element: HTMLElement, syntax: string) =&gt; void</code></td>\n<td><code>(code, syntax) =&gt; void 0</code></td>\n<td>Whenever <code>CodeJar</code> has new input, this callback is called to highlight the <code>&lt;code&gt;</code> element</td>\n</tr>\n<tr>\n<td>syntax</td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>Sets the current language mode of the Editor</td>\n</tr>\n<tr>\n<td>value</td>\n<td><code>string</code></td>\n<td><code>&quot;&quot;</code></td>\n<td>Sets the current text of the Editor</td>\n</tr>\n<tr>\n<td>class</td>\n<td><code>string</code></td>\n<td><code>&quot;&quot;</code></td>\n<td>Applies <code>class=&quot;&quot;</code> to the <code>&lt;pre&gt;</code> container element</td>\n</tr>\n<tr>\n<td>style</td>\n<td><code>string</code></td>\n<td><code>undefined</code></td>\n<td>Applies <code>style=&quot;&quot;</code> to the <code>&lt;pre&gt;</code> container element</td>\n</tr>\n</tbody>\n</table>\n<h3>API</h3>\n<ul>\n<li>\n<p>Components</p>\n<ul>\n<li><code>CodeJar</code></li>\n</ul>\n</li>\n</ul>\n',n,t),u(n,a,t)},p:r,d(n){n&&d(a),n&&s.d()}}}function m(n){let s,a;return s=new h({props:{$$slots:{default:[g]},$$scope:{ctx:n}}}),{c(){t(s.$$.fragment)},l(n){e(s.$$.fragment,n)},m(n,t){o(s,n,t),a=!0},p(n,[a]){const t={};1&a&&(t.$$scope={dirty:a,ctx:n}),s.$set(t)},i(n){a||(p(s.$$.fragment,n),a=!0)},o(n){c(s.$$.fragment,n),a=!1},d(n){l(s,n)}}}export default class extends n{constructor(n){super(),s(this,n,null,m,a,{})}}
